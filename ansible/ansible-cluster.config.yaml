---
- name: Create Kubernetes deployment and service for web-server , Jenkins  namespace
  hosts: root
  connection: local
  become: true
  gather_facts: false
  vars:
    web_namespace: miniproject
    deployment_name: miniproject
    image: khanhtoan007/miniproject:v1
    jenkins_image_name: jenkins/jenkins:lts
    jenkins_namespace: jenkins
    jenkins_deployment_name: jenkins
    do_token: dop_v1_84583e065650f3bb87c1d2ef8948ee108ca1e196d2bf46109cbfef948c1c047c
  tasks:
    - name: Install required python libraries
      pip:
        name: kubernetes
    #Authenticate with Digital Ocean
    - name: ensure ssh key exists
      user:
        name: "ubunutu"
        generate_ssh_key: yes
        ssh_key_file: ~/.ssh/id_rsa

    # - name: ensure key exists at DigitalOcean
    #   digital_ocean:
    #    state: presenta
    #    command: ssh
    #    name: my_ssh_key
    #    ssh_pub_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    #    api_token: "{{ do_token }}"
    #   register: my_ssh_key

    # - name: "add public ssh key to digitalocean account"
    #   digital_ocean_sshkey:
    #     name: "ubunutu"
    #     api_token: "{{ do_token }}"
    #     ssh_pub_key: "{{lookup('file', '~/.ssh/id_rsa.pub') }}"
    #     state: present
    #   register: sshkey_result

    - name: Authenticate with DigitalOcean Api
      digital_ocean:
        state: present
        command: ssh
        name: "ansible"
        api_token: "{{ do_token }}"

    - name: Gather information about all load balancers
      community.digitalocean.digital_ocean_load_balancer_info:
        oauth_token: "{{ lookup('ansible.builtin.env', 'OAUTH_TOKEN') }}"
      register: my_loadbalancer

    - ansible.builtin.debug:
        msg: "Load balancer : {{ my_loadbalancer.data}}"

    # Connect to cluster using local kubeconfig file
    - name: Get information about an existing DigitalOcean Kubernetes cluster
      community.digitalocean.digital_ocean_kubernetes_info:
        oauth_token: "{{ lookup('ansible.builtin.env', 'OAUTH_TOKEN') }}"
        name: k8s-dev
        return_kubeconfig: yes
      register: my_cluster

    # - ansible.builtin.debug:
    #    msg: "Cluster name is {{ my_cluster.data.name }}, ID is {{ my_cluster.data.id }}"

    # - ansible.builtin.debug:
    #    msg: "Cluster kubeconfig is {{ my_cluster.data.kubeconfig }}"

    # - name: Get Cluster information
    #   kubernetes.core.k8s_info:
    #    api_key: "{{do_token}}"
    #    kind: Namespace
    #    name: jenkins
    #   register: api_status

    - name: Create web-server namespace
      k8s:
        api_key: "{{ do_token }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ deployment_name }}"

    # - name: Create web-server deployment
    #   k8s:
    #     api_key: "{{ do_token }}"
    #     definition:
    #       apiVersion: v1
    #       kind: Deployment
    #       metadata:
    #         name: "{{ deployment_name }}"
    #         namespace: "{{ web_namespace }}"
    #       spec:
    #         replicas: 3
    #         selector:
    #           matchLabels:
    #             app: "{{ deployment_name }}"
    #         template:
    #           metadata:
    #             labels:
    #               app: "{{ deployment_name }}"
    #           spec:
    #             containers:
    #             - name: app
    #               image: "{{ image }}"
    #               ports:
    #               - containerPort: 4000

    # - name: Create web-server service
    #   k8s:
    #     api_key: "{{ do_token }}"
    #     definition:
    #       apiVersion: v1
    #       kind: Service
    #       metadata:
    #         name: "{{ deployment_name }}-service"
    #         namespace: "{{ web_namespace }}"
    #         annotations:
    #          kubernetes.digitalocean.com/load-balancer-id: "03d94bf0-23a6-4a75-bb41-fbad66f50d6b"
    #          service.beta.kubernetes.io/do-loadbalancer-size-unit: "1"
    #          service.beta.kubernetes.io/do-loadbalancer-disable-lets-encrypt-dns-records: "false"
    #       spec:
    #         selector:
    #           app: "{{ deployment_name }}"
    #         type: LoadBalancer
    #         ports:
    #           - name: http
    #             port: 80
    #             targetPort: 4000

    - name: Create jenkins namespace
      k8s:
        api_key: "{{ do_token }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ jenkins_namespace }}"

    - name: Create Jenkins account
      k8s:
        api_key: "{{ do_token }}"
        src: ./jenkins-config/serviceAccount.yaml

    - name: Create Jenkins Volume and Volume claim
      k8s:
        api_key: "{{ do_token }}"
        src: ./jenkins-config/jenkins-storage.yaml

    - name: Create Jenkins deployment
      k8s:
        api_key: "{{ do_token }}"
        src: ./jenkins-config/jenkins.yaml

    - name: Create Jenkins Service
      k8s:
        api_key: "{{ do_token }}"
        src: ./jenkins-config/jenkins-service.yaml
